package main

import (
	"bytes"
	"context"
	"crypto/tls"
	"encoding/json"
	"io"
	"log"
	"net/http"
	"net/http/httptest"
	"net/url"
	"os"
	"strings"
	"testing"

	"connectrpc.com/connect"
	"github.com/go-faker/faker/v4"
	"github.com/yoshihiro-shu/tech-blog-admin/backend/interceptor"
	backendv1 "github.com/yoshihiro-shu/tech-blog-admin/backend/protobuf/gen/backend/v1"        // generated by protoc-gen-go
	"github.com/yoshihiro-shu/tech-blog-admin/backend/protobuf/gen/backend/v1/backendv1connect" // generated by protoc-gen-connect-go
	"github.com/yoshihiro-shu/tech-blog-admin/backend/service"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials"
)

var endpoint string
var httpServer *httptest.Server

func TestMain(m *testing.M) {
	srv := &service.BackendServer{}
	interceptors := connect.WithInterceptors(interceptor.Logger())

	mux := http.NewServeMux()
	path, handler := backendv1connect.NewBackendServiceHandler(srv, interceptors)
	mux.Handle(path, handler)

	httpServer = httptest.NewUnstartedServer(handler)
	httpServer.EnableHTTP2 = true
	httpServer.StartTLS()
	defer httpServer.Close()

	endpoint = httpServer.URL

	log.Printf("server is started at %s", endpoint)

	os.Exit(m.Run())
}

func TestHttpRequest(t *testing.T) {
	// リクエストボディの作成
	requestBody, err := json.Marshal(backendv1.SayHelloRequest{
		Name: faker.Name(),
	})

	if err != nil {
		t.Log("JSONエンコードエラー:", err)
		return
	}

	// HTTPリクエストの作成
	url := endpoint + "/backend.v1.BackendService/SayHello"
	req, err := http.NewRequest("POST", url, bytes.NewBuffer(requestBody))
	if err != nil {
		t.Log("リクエスト作成エラー:", err)
		return
	}

	// ヘッダーの設定
	req.Header.Set("Content-Type", "application/json")
	httpClient := &http.Client{
		Transport: &http.Transport{
			TLSClientConfig: &tls.Config{
				InsecureSkipVerify: true,
			},
		},
		// Transport: &http2.Transport{
		// 	TLSClientConfig: &tls.Config{
		// 		InsecureSkipVerify: true,
		// 	},
		// },
	}
	// req.Header.Set("Content-Type", "application/grpc")

	// HTTPクライアントの作成と実行
	resp, err := httpClient.Do(req)
	if err != nil {
		t.Log("リクエスト送信エラー:", err)
		return
	}
	defer resp.Body.Close()

	// レスポンスの読み取り
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		t.Log("レスポンス読み取りエラー:", err)
		return
	}
	// レスポンスの表示
	t.Log(strings.Repeat("-", 100))
	t.Logf(resp.Proto)
	t.Log(strings.Repeat("-", 100))
	t.Logf("resp.Header(): %#v", resp.Header)
	t.Log(strings.Repeat("-", 100))
	t.Logf("resp.Trailer(): %#v", resp.Trailer)
	t.Log(strings.Repeat("-", 100))
	t.Log(string(body))
	t.Log(strings.Repeat("-", 100))
}

func TestGRPCWebClientRequest(t *testing.T) {
	ctx := context.Background()
	opts := []connect.ClientOption{
		connect.WithGRPCWeb(),
	}

	httpClient := &http.Client{
		Transport: &http.Transport{
			TLSClientConfig: &tls.Config{
				InsecureSkipVerify: true,
			},
		},
		// Transport: &http2.Transport{
		// 	TLSClientConfig: &tls.Config{
		// 		InsecureSkipVerify: true,
		// 	},
		// },
	}
	client := backendv1connect.NewBackendServiceClient(httpClient, endpoint, opts...)
	res, err := client.SayHello(ctx, &connect.Request[backendv1.SayHelloRequest]{
		Msg: &backendv1.SayHelloRequest{
			Name: faker.Name(),
		},
	})
	if err != nil {
		t.Fatalf("error %s", err)
	}
	t.Log(strings.Repeat("-", 100))
	t.Logf("res.Header(): %#v", res.Header())
	t.Log(strings.Repeat("-", 100))
	t.Logf("trailer: %#v", res.Trailer())
	t.Log(strings.Repeat("-", 100))
	t.Logf("res: %#v", res.Msg)
	t.Log(strings.Repeat("-", 100))
}

func TestGRPCClientRequest(t *testing.T) {
	ctx := context.Background()
	opts := []connect.ClientOption{
		connect.WithGRPC(),
	}
	// httpClient := &http.Client{}
	client := backendv1connect.NewBackendServiceClient(httpServer.Client(), endpoint, opts...)
	res, err := client.SayHello(ctx, &connect.Request[backendv1.SayHelloRequest]{
		Msg: &backendv1.SayHelloRequest{
			Name: faker.Name(),
		},
	})
	if err != nil {
		t.Fatalf("error %s", err)
	}
	t.Log(strings.Repeat("-", 100))
	t.Logf("res.Header(): %#v", res.Header())
	t.Log(strings.Repeat("-", 100))
	t.Logf("trailer: %#v", res.Trailer())
	t.Log(strings.Repeat("-", 100))
	t.Logf("res: %#v", res.Msg)
	t.Log(strings.Repeat("-", 100))
}

func TestGRPCRequest(t *testing.T) {
	ctx := context.Background()
	// エンドポイントをパース
	parsedURL, err := url.Parse(endpoint)
	if err != nil {
		log.Fatalf("failed to parse endpoint: %v", err)
	}
	// ホストとポートを取得
	host := parsedURL.Hostname()
	port := parsedURL.Port()

	conn, err := grpc.NewClient(
		host+":"+port,
		grpc.WithTransportCredentials(credentials.NewTLS(&tls.Config{
			InsecureSkipVerify: true,
		})),
	)
	if err != nil {
		t.Fatalf("error %s", err)
	}
	defer conn.Close()
	grpcClient := backendv1.NewBackendServiceClient(conn)
	res, err := grpcClient.SayHello(ctx, &backendv1.SayHelloRequest{
		Name: faker.Name(),
	})
	if err != nil {
		t.Fatalf("error %s", err)
	}
	t.Log(strings.Repeat("-", 100))
	t.Logf("res: %#v", res)
	t.Log(strings.Repeat("-", 100))
}

// grpcurl \
//     -protoset <(buf build -o -) -plaintext \
//     -d '{"name": "yoshi"}' \
//     localhost:8080 backend.v1.BackendService/SayHello
// {
//   "message": "Hello, yoshi"
// }
