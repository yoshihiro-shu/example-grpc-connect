package main

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"testing"

	"connectrpc.com/connect"
	"github.com/yoshihiro-shu/tech-blog-admin/backend/interceptor"
	backendv1 "github.com/yoshihiro-shu/tech-blog-admin/backend/protobuf/gen/backend/v1"        // generated by protoc-gen-go
	"github.com/yoshihiro-shu/tech-blog-admin/backend/protobuf/gen/backend/v1/backendv1connect" // generated by protoc-gen-connect-go
	"github.com/yoshihiro-shu/tech-blog-admin/backend/service"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"
)

// func TestMain(m *testing.M) {
// 	server := &service.BackendServer{}
// 	interceptors := connect.WithInterceptors(interceptor.Logger())

// 	mux := http.NewServeMux()
// 	path, handler := backendv1connect.NewBackendServiceHandler(server, interceptors)
// 	mux.Handle(path, handler)

// 	log.Printf("server is started at %s", "localhost:8080")

// 	go http.ListenAndServe(
// 		":8080",
// 		// Use h2c so we can serve HTTP/2 without TLS.
// 		h2c.NewHandler(mux, &http2.Server{}),
// 	)
// }

func TestHttpRequest(t *testing.T) {
	server := &service.BackendServer{}
	interceptors := connect.WithInterceptors(interceptor.Logger())

	mux := http.NewServeMux()
	path, handler := backendv1connect.NewBackendServiceHandler(server, interceptors)
	mux.Handle(path, handler)

	log.Printf("server is started at %s", "localhost:8080")

	go http.ListenAndServe(
		":8080",
		// Use h2c so we can serve HTTP/2 without TLS.
		h2c.NewHandler(mux, &http2.Server{}),
	)
	// リクエストボディの作成
	requestBody, err := json.Marshal(map[string]string{
		"name": "yoshi",
	})
	if err != nil {
		fmt.Println("JSONエンコードエラー:", err)
		return
	}

	// HTTPリクエストの作成
	url := "http://localhost:8080/backend.v1.BackendService/SayHello"
	req, err := http.NewRequest("POST", url, bytes.NewBuffer(requestBody))
	if err != nil {
		fmt.Println("リクエスト作成エラー:", err)
		return
	}

	// ヘッダーの設定
	req.Header.Set("Content-Type", "application/json")

	// HTTPクライアントの作成と実行
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("リクエスト送信エラー:", err)
		return
	}
	defer resp.Body.Close()

	// レスポンスの読み取り
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		fmt.Println("レスポンス読み取りエラー:", err)
		return
	}
	// レスポンスの表示
	t.Log(string(body))
}

func TestGRPCWebClientRequest(t *testing.T) {
	server := &service.BackendServer{}
	interceptors := connect.WithInterceptors(interceptor.Logger())

	mux := http.NewServeMux()
	path, handler := backendv1connect.NewBackendServiceHandler(server, interceptors)
	mux.Handle(path, handler)

	log.Printf("server is started at %s", "localhost:8080")

	go http.ListenAndServe(
		":8080",
		// Use h2c so we can serve HTTP/2 without TLS.
		h2c.NewHandler(mux, &http2.Server{}),
	)
	ctx := context.Background()
	// httpClient := &http.Client{
	// 	Transport: &http2.Transport{
	// 		TLSClientConfig: &tls.Config{
	// 			InsecureSkipVerify: true,
	// 		},
	// 	},
	// }
	const endpont = "http://localhost:8080"
	opts := []connect.ClientOption{
		connect.WithGRPCWeb(),
	}
	client := backendv1connect.NewBackendServiceClient(http.DefaultClient, endpont, opts...)
	res, err := client.SayHello(ctx, &connect.Request[backendv1.SayHelloRequest]{
		Msg: &backendv1.SayHelloRequest{
			Name: "yoshi",
		},
	})
	if err != nil {
		t.Fatalf("error %s", err)
	}
	t.Logf("messages: %s", res.Msg.GetMessage())
}

func TestGRPCClientRequest(t *testing.T) {
	server := &service.BackendServer{}
	interceptors := connect.WithInterceptors(interceptor.Logger())

	mux := http.NewServeMux()
	path, handler := backendv1connect.NewBackendServiceHandler(server, interceptors)
	mux.Handle(path, handler)

	log.Printf("server is started at %s", "localhost:8080")

	go http.ListenAndServe(
		":8080",
		// Use h2c so we can serve HTTP/2 without TLS.
		h2c.NewHandler(mux, &http2.Server{}),
	)
	ctx := context.Background()
	// httpClient := &http.Client{
	// 	Transport: &http2.Transport{
	// 		TLSClientConfig: &tls.Config{
	// 			InsecureSkipVerify: true,
	// 		},
	// 	},
	// }
	const endpont = "http://localhost:8080"
	opts := []connect.ClientOption{
		connect.WithGRPC(),
	}
	client := backendv1connect.NewBackendServiceClient(http.DefaultClient, endpont, opts...)
	res, err := client.SayHello(ctx, &connect.Request[backendv1.SayHelloRequest]{
		Msg: &backendv1.SayHelloRequest{
			Name: "yoshi",
		},
	})
	if err != nil {
		t.Fatalf("error %s", err)
	}
	t.Logf("res: %#v", res)
	t.Logf("messages: %s", res.Msg.GetMessage())
}
