package service

import (
	"context"
	"fmt"
	"log"
	"strings"

	"connectrpc.com/connect"
	backendv1 "github.com/yoshihiro-shu/tech-blog-admin/backend/protobuf/gen/backend/v1"        // generated by protoc-gen-go
	"github.com/yoshihiro-shu/tech-blog-admin/backend/protobuf/gen/backend/v1/backendv1connect" // generated by protoc-gen-connect-go
)

var _ backendv1connect.BackendServiceHandler = (*BackendServer)(nil)

type BackendServer struct{}

func (b *BackendServer) SayHello(ctx context.Context, req *connect.Request[backendv1.SayHelloRequest]) (*connect.Response[backendv1.SayHelloResponse], error) {
	res := connect.NewResponse(&backendv1.SayHelloResponse{
		Message: "Hello, " + req.Msg.GetName(),
	})
	res.Header().Set("x-header", "header")
	return res, nil
}

func (b *BackendServer) Greet(ctx context.Context, stream *connect.ClientStream[backendv1.GreetRequest]) (*connect.Response[backendv1.GreetResponse], error) {
	log.Println("Request headers: ", stream.RequestHeader())
	var greeting strings.Builder
	for stream.Receive() {
		g := fmt.Sprintf("Hello, %s!\n", stream.Msg().Name)
		if _, err := greeting.WriteString(g); err != nil {
			return nil, connect.NewError(connect.CodeInternal, err)
		}
	}
	if err := stream.Err(); err != nil {
		return nil, connect.NewError(connect.CodeUnknown, err)
	}
	res := connect.NewResponse(&backendv1.GreetResponse{
		Greeting: greeting.String(),
	})
	res.Header().Set("Greet-Version", "v1")
	return res, nil
}
