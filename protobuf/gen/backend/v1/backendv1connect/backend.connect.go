// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: backend/v1/backend.proto

package backendv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/yoshihiro-shu/tech-blog-admin/backend/protobuf/gen/backend/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BackendServiceName is the fully-qualified name of the BackendService service.
	BackendServiceName = "backend.v1.BackendService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BackendServiceSayHelloProcedure is the fully-qualified name of the BackendService's SayHello RPC.
	BackendServiceSayHelloProcedure = "/backend.v1.BackendService/SayHello"
	// BackendServiceGreetProcedure is the fully-qualified name of the BackendService's Greet RPC.
	BackendServiceGreetProcedure = "/backend.v1.BackendService/Greet"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	backendServiceServiceDescriptor        = v1.File_backend_v1_backend_proto.Services().ByName("BackendService")
	backendServiceSayHelloMethodDescriptor = backendServiceServiceDescriptor.Methods().ByName("SayHello")
	backendServiceGreetMethodDescriptor    = backendServiceServiceDescriptor.Methods().ByName("Greet")
)

// BackendServiceClient is a client for the backend.v1.BackendService service.
type BackendServiceClient interface {
	// Sends a greeting
	SayHello(context.Context, *connect.Request[v1.SayHelloRequest]) (*connect.Response[v1.SayHelloResponse], error)
	// Sends a greetings Stream
	Greet(context.Context) *connect.ClientStreamForClient[v1.GreetRequest, v1.GreetResponse]
}

// NewBackendServiceClient constructs a client for the backend.v1.BackendService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBackendServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BackendServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &backendServiceClient{
		sayHello: connect.NewClient[v1.SayHelloRequest, v1.SayHelloResponse](
			httpClient,
			baseURL+BackendServiceSayHelloProcedure,
			connect.WithSchema(backendServiceSayHelloMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		greet: connect.NewClient[v1.GreetRequest, v1.GreetResponse](
			httpClient,
			baseURL+BackendServiceGreetProcedure,
			connect.WithSchema(backendServiceGreetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// backendServiceClient implements BackendServiceClient.
type backendServiceClient struct {
	sayHello *connect.Client[v1.SayHelloRequest, v1.SayHelloResponse]
	greet    *connect.Client[v1.GreetRequest, v1.GreetResponse]
}

// SayHello calls backend.v1.BackendService.SayHello.
func (c *backendServiceClient) SayHello(ctx context.Context, req *connect.Request[v1.SayHelloRequest]) (*connect.Response[v1.SayHelloResponse], error) {
	return c.sayHello.CallUnary(ctx, req)
}

// Greet calls backend.v1.BackendService.Greet.
func (c *backendServiceClient) Greet(ctx context.Context) *connect.ClientStreamForClient[v1.GreetRequest, v1.GreetResponse] {
	return c.greet.CallClientStream(ctx)
}

// BackendServiceHandler is an implementation of the backend.v1.BackendService service.
type BackendServiceHandler interface {
	// Sends a greeting
	SayHello(context.Context, *connect.Request[v1.SayHelloRequest]) (*connect.Response[v1.SayHelloResponse], error)
	// Sends a greetings Stream
	Greet(context.Context, *connect.ClientStream[v1.GreetRequest]) (*connect.Response[v1.GreetResponse], error)
}

// NewBackendServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBackendServiceHandler(svc BackendServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	backendServiceSayHelloHandler := connect.NewUnaryHandler(
		BackendServiceSayHelloProcedure,
		svc.SayHello,
		connect.WithSchema(backendServiceSayHelloMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceGreetHandler := connect.NewClientStreamHandler(
		BackendServiceGreetProcedure,
		svc.Greet,
		connect.WithSchema(backendServiceGreetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/backend.v1.BackendService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BackendServiceSayHelloProcedure:
			backendServiceSayHelloHandler.ServeHTTP(w, r)
		case BackendServiceGreetProcedure:
			backendServiceGreetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBackendServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBackendServiceHandler struct{}

func (UnimplementedBackendServiceHandler) SayHello(context.Context, *connect.Request[v1.SayHelloRequest]) (*connect.Response[v1.SayHelloResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.v1.BackendService.SayHello is not implemented"))
}

func (UnimplementedBackendServiceHandler) Greet(context.Context, *connect.ClientStream[v1.GreetRequest]) (*connect.Response[v1.GreetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.v1.BackendService.Greet is not implemented"))
}
